################################################################################
# Named function
################################################################################
snippet func
	function ${1:functionName} (${2}) {
		${0}
	}
################################################################################
# Anonymous function
################################################################################
snippet funca
	function (${1}) {
		${0}
	}
################################################################################
# Anonymous function assined to a variable
################################################################################
snippet funcv
	var ${1:varFunction} = function (${1}) {
		${0}
	}
################################################################################
# Immediate function
################################################################################
snippet (func
	(function (${1}) {
		'use strict';

		${0}
	})(${2});
################################################################################
# If statement
################################################################################
snippet if
	if (${1:true}) {
		${0}
	}
################################################################################
# If-Else statement
################################################################################
snippet ife
	if (${1:true}) {
		${2}
	} else {
		${0}
	}
################################################################################
# Ternary if
################################################################################
snippet ift
	${0:/* condition */} ? ${1:/* if true */} : ${2:/* if false */};${0}
################################################################################
# For loop statement
################################################################################
snippet for
	for (let ${1:i}; $i < ${2:arrayVariable}; $1++) {
		${0}
	}
################################################################################
# For in
################################################################################
snippet forin
	for (let ${1:prop} in ${2:object}) {
		${0}
	}
################################################################################
# While loop
################################################################################
snippet whi
	while (${1:/* Condition */}) {
		${0}
	}
################################################################################
# Do while
################################################################################
snippet do
	do {
		${0}
	} while (${1:/* Condition */});
################################################################################
# Switch statement
################################################################################
snippet switch
	switch (${1:expression}) {
		case '${3:case}':
			${4}
			break;
		default:
			${2}
	}
################################################################################
# Case (switch-case) statement
################################################################################
snippet case
	case '${1:case}':
		${2}
		break;
	${0}
################################################################################
# Try statement
################################################################################
snippet try
	try {
		${1:/* Commands */}
	} catch (${2:e}) {
		${0:/* Error handler */}
	}
################################################################################
# Try finally statement
################################################################################
snippet tryf
	try {
		${1:/* Commands */}
	} catch (${2:e}) {
		${0:/* Error handler */}
	} finally {
		${3:/* Always execute the follow code */}
	}
################################################################################
# Throw error
################################################################################
snippet terr
	throw new Error('${0:/* Error message */}')
################################################################################
# Dictionary (object)
################################################################################
snippet obj
	{
		${1:key}: ${0:value},
	}
################################################################################
# Docstring
################################################################################
snippet /**
	/**
	* ${0:Documentation description}
	**/
snippet @param
	@param {${1:type}} ${2:name} ${0:Description}
snippet @ret
		@return {${1:type}} ${0:Description}
################################################################################
# JSON
################################################################################
snippet jsonp
	JSON.parse(${0:object});
snippet jsons
	JSON.stringify(${0:object});
snippet jsonsp
	JSON.stringify(${0:object}, null, 2);
################################################################################
# Debuggers
################################################################################
snippet deb
	debugger;
snippet ca
	console.assert(${0:expression}, ${0:object});
snippet cd
	console.debug(${0:'Debug'});
snippet ce
	console.error(${0:'Error'});
snippet cll
	console.log('${0:Log}');
snippet cl
	console.log('${1:varName}', $1);
snippet cls
	console.log('${1:varName}', JSON.stringify($1, null, 2));
snippet clt
	console.time(${0:label});
snippet cl-
	console.log('********************', ' ${1:Message} ', '********************');
snippet cl8
	console.log('****************************************');
snippet then
	.then(${1:param} => { console.log('$1', $1); return $1; })
